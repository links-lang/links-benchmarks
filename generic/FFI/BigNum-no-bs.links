

alien javascript "/js/div.js" {
    # String represents a number
    div: (String, String) -> String;
    add: (String, String) -> String;
    mult: (String, String) -> String;
}

typename LFT = (String, String, String, String);


# Convert LFT into String representation
sig toStr : (LFT) -> String
fun toStr(m) {
  var (a, b, c, d) = m;
  ("(" ^^ a ^^ "," ^^ b ^^ "," ^^ c ^^ "," ^^ d ^^ ")")
}

var unit = ("1", "0", "0", "1") : LFT;

fun concat(xs) { fold_left1((^^), xs) }
fun join(sep, xs) { fold_left1(fun(x,y) { x ^^ sep ^^ y }, xs) }

fun comp(m1: LFT, m2: LFT) {
  var (q, r, s, t) = m1;
  var (u, v, w, x) = m2;
  (add(mult(q, u), mult(r, w)),
  add(mult(q, v), mult(r, x)),
  add(mult(s, u), mult(t, w)),
  add(mult(s, v), mult(t, x)))
}

sig floorExtr : (LFT, String) -> String 
fun floorExtr(m, x) {
  var (q, r, s, t) = m;
  var numerator = mult(q, add(x, r));
  var denominator = mult(s, add(x, t));
  div(numerator, denominator)
}

fun next(z: LFT) {
  floorExtr(z, "3")
}

fun prod(z: LFT, n: String) {
  var m = ("10", mult("-10", n), "0", "1");
  comp(m, z): LFT
}

fun safe(z: LFT, n: String) {
  n == floorExtr(z, "4"): Bool
}


# TODO: Use alias
# var cons = comp;
# var init = unit;

fun stream(z: LFT, inputs: [LFT]) {
  switch (inputs) {
    case []      -> []
    case (x::xs) -> {
      var y = next(z); 
      if (safe(z, y))
        y :: stream(prod(z, y), x::xs)
      else
        stream(comp(z, x), xs)
    }
  }
}

var n = 5;

# Client stuff
fun mainPage(_) {
  var _ = spawnClient {
    var lfts = {
      for (k <- [1..50]) {
        var a = intToString(k);
        [(a, add(mult("4", a), "2"), "0", add(mult("2", a), "1"))]
      } 
    };

    # Check generated input:
    println(join("\n", map(toStr, lfts)));

    var resultBigNums= stream(unit, lfts);
    var resultOutput = concat(resultBigNums);
    println(resultOutput)

    # Test for FFI:
    # var x = "827051679123300405951680961800347285106958375787734756185263755457764627838532131089947524982865945742274339057699143896563382796586769455623565354897448889999809072755913848194352516842966752270841483271723609604541923087199354715662710621545142765404881732416241159842802394931437429360793488706913600170045593406575262355741012590138599576920599438827724247100958597505123443761519190613610730175470175873951817371622201178908511201808664614824604233712117325108825239818447574140960397474041509154652237911392309279005968322600906579216940730225937870723028764539744366795168184831792994264341855880293429565439102844043988399826330572413933586636842136012966156884593999405673341793855876656124536982904138877289894304284613619788341098981732102402020245790481567382812500"; 
    # var y = "103555840523989831490839819265982632825710039475905915845059795477472073833338762459721429995505191345923921066647230583671884785800486060905693447594657817541000030955075287097953207586211467543863550941927270853526280302673747226285295703584523700047535587160760312197503369324871346171105447166736491468400588736596893844811549033042751972131685467387493546674997093281226022071939664392313786381966335000409971587994703877499507797678196196575201467134087639706611956624784027310435606585689229875142402693598461974042404291712588504429165186731950416381740585962091126618475022673969546854288735269710618634036398758304576932065685996256006557938389814190509713940898722323901908617777214966809530961918373427739857748973291860154592736176226708266767673194408416748046875";
    # var res = mult(x, y);
    # println(res)

  };

  page
    <html><body><h1>Hi!</h1></body></html>
}

fun main() {
  addRoute("/", mainPage);
  addStaticRoute("/js", "js", [("js", "text/javascript")]);
  servePages()
}

main()