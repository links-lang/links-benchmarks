

alien javascript "/js/div.js" {
    # String represents a number
    div: (String, String) -> String;
    add: (String, String) -> String;
    mult: (String, String) -> String;
}

typename LFT = (String, String, String, String);


# Convert LFT into String representation
sig toStr : (LFT) -> String
fun toStr(m) {
  var (a, b, c, d) = m;
  ("(" ^^ a ^^ "," ^^ b ^^ "," ^^ c ^^ "," ^^ d ^^ ")")
}

var unit = ("1", "0", "0", "1") : LFT;

fun join(sep, xs) { fold_left1(fun(x,y) { x ^^ sep ^^ y }, xs) }

# Note: Empty string required to avoid addition of integer at client side
fun concat(xs) { join("", xs) }

fun comp(m1: LFT, m2: LFT) {
  var (q, r, s, t) = m1;
  var (u, v, w, x) = m2;
  (add(mult(q, u), mult(r, w)),
  add(mult(q, v), mult(r, x)),
  add(mult(s, u), mult(t, w)),
  add(mult(s, v), mult(t, x)))
}

sig floorExtr : (LFT, String) -> String 
fun floorExtr(m, x) {
  var numerator = add(mult(first(m), x), second(m));
  var denominator = add(mult(third(m), x), fourth(m));
  # Log - division: println("Dividing " ^^ numerator ^^ "by" ^^ denominator);
  div(numerator, denominator)
}

fun next(z: LFT) {
  floorExtr(z, "3")
}

fun prod(z: LFT, n: String) {
  var m = ("10", mult("-10", n), "0", "1");
  comp(m, z): LFT
}

fun safe(z: LFT, n: String) {
  n == floorExtr(z, "4"): Bool
}


# TODO: Use alias
# var cons = comp;
# var init = unit;

fun stream(z: LFT, inputs: [LFT]) {
  switch (inputs) {
    case []      -> []
    case (x::xs) -> {
      var y = next(z); 
      if (safe(z, y))
        y :: stream(prod(z, y), x::xs)
      else
        stream(comp(z, x), xs)
    }
  }
}

var inputMatrixCount = 100;

# Client stuff
fun mainPage(_) {
  var _ = spawnClient {
    var lfts = {
      for (k <- [1..inputMatrixCount]) {
        var a = intToString(k);
        [(a, add(mult("4", a), "2"), "0", add(mult("2", a), "1"))]
      } 
    };

    # Log - lfts calculation: println(join("\n", map(toStr, lfts)));

    var resultBigNums= stream(unit, lfts) : [String];

    # var resultBigNums= map(fun (n) { "\"" ^^ n ^^ "\"," }, stream(unit, lfts));
    var resultOutput = concat(resultBigNums);
    # var resultOutput = join(",", resultBigNums) ^^ "]";
    println(resultOutput)

  };

  page
    <html><body><h1>Hi!</h1></body></html>
}

fun main() {
  addRoute("/", mainPage);
  addStaticRoute("/js", "js", [("js", "text/javascript")]);
  servePages()
}

main()