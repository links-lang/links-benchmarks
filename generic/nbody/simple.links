# =================
# N-body simulation
# =================
#
# A program that numerically simulates the evolution of the outer planets of the solar
# system.
#
# This is a simple functional version of the algorithm.
#
#
# References:
# -----------
#
# * Mark C. Lewis's (with modifications from Chad Whipkey) "n-body Java #2 program"
#   [https://benchmarksgame-team.pages.debian.net/benchmarksgame/program/nbody-java-2.html]
#
# * and Troestler Christophe's implementation of the same problem in OCaml
#   [https://benchmarksgame-team.pages.debian.net/benchmarksgame/program/nbody-ocaml-1.html]
#
# Uses: records, lists, floating point arithmetic, type aliases


# Type aliases:
typename Triple(a) = (a, a, a);

typename Vector3 = Triple(Float);
var zero3 = (0.0, 0.0, 0.0) : Vector3;
typename Scalar = Float;

typename Body = ( pos  : Vector3
                , vel  : Vector3
                , mass : Scalar );

typename State = [Body];

# Helper functions:

## Vectors:

sig +++ : (Vector3, Vector3) -> Vector3
op (ux,uy,uz) +++ (vx,vy,vz) { (ux +. vx, uy +. vy, uz +. vz ) }

sig --- : (Vector3, Vector3) -> Vector3
op (ux,uy,uz) --- (vx,vy,vz) { (ux -. vx, uy -. vy, uz -. vz ) }

sig vector_sum : ([Vector3]) ~> Vector3
fun vector_sum(lst) {
  fold_left((+++), zero3, lst)
}

sig **. : (Float, Vector3) -> Vector3
op s **. (x,y,z) { (s *. x, s *. y, s *. z) }

sig norm2 : (Vector3) -> Float
fun norm2((x,y,z)) {
  x *. x +. y *. y +. z *. z
}

sig norm : (Vector3) -> Float
fun norm(v) {
  sqrt(norm2(v))
}

# Physics:

sig offset_momentum : (Float, State) ~> State
fun offset_momentum(solar_mass, system) {
  var dp = fold_left(fun(acc, body) {
    acc +++ (body.mass **. body.vel)
  }, zero3, system);

  var (sun::rest) = system;
  var sun = (sun with vel = (-. 1.0 /. solar_mass) **. dp);
  (sun::rest)
}

sig initial_state : () ~> State
fun initial_state() {
  var pi = 3.141592653589793;
  var solar_mass = 4.0 *. pi *. pi;
  var days_per_year = 365.24;

  var sun = (mass = solar_mass, pos = zero3, vel = zero3);
  var star' = ( mass = solar_mass
      	      , pos  = (1.0, 2.0, 3.0)
	      , vel  = (0.5, -.0.1, 0.0));

  var jupiter = ( mass =     9.54791938424326609e-4 *. solar_mass
                , pos  = (   4.84143144246472090e0
                         , -.1.16032004402742839e0
                         , -.1.03622044471123109e-1 )
                , vel  = days_per_year **.
		         (   1.66007664274403694e-3
                         ,   7.69901118419740425e-3
                         , -.6.90460016972063023e-5 ));

  var saturn = ( mass =     2.85885980666130812e-4 *. solar_mass
               , pos  = (   8.34336671824457987e0
                        ,   4.12479856412430479e0
                        , -.4.03523417114321381e-1 )
               , vel  = days_per_year **.
	                ( -.2.76742510726862411e-3
                        ,   4.99852801234917238e-3
                        ,   2.30417297573763929e-5 ));

  var uranus = ( mass =     4.36624404335156298e-5 *. solar_mass
               , pos  = (   1.28943695621391310e1
                        , -.1.51111514016986312e1
                        , -.2.23307578892655734e-1 )
               , vel  = days_per_year **.
	                (   2.96460137564761618e-3
                        ,   2.37847173959480950e-3
                        , -.2.96589568540237556e-5 ));

  var neptune = ( mass =     5.15138902046611451e-5 *. solar_mass
                , pos  = (   1.53796971148509165e1
                         , -.2.59193146099879641e1
                         ,   1.79258772950371181e-1 )
                , vel  = days_per_year **.
		         (   2.68067772490389322e-3
                         ,   1.62824170038242295e-3
                         , -.9.51592254519715870e-5 ));

  var bodies = [ sun, jupiter, saturn, uranus, neptune ];
  var bodies = offset_momentum(solar_mass, bodies);
  bodies
}

sig interact : (Float, Body, Body) -> (Body, Body)
fun interact(dt, (pos=r1, vel=v1, mass=m1),
                 (pos=r2, vel=v2, mass=m2)) {
  var dr = r1 --- r2;
  var d2 = norm2(dr);
  var mag = dt /. (d2 *. sqrt(d2));

  var fc1 = m2 *. mag;
  var fc2 = m1 *. mag;

  var v1 = v1 --- (fc1 **. dr);
  var v2 = v2 +++ (fc2 **. dr);

  var b1 = (pos=r1, vel=v1, mass=m1);
  var b2 = (pos=r2, vel=v2, mass=m2);
  (b1, b2)
}


sig inter_fold : (Float) -> ((Body, [Body]), Body) -> (Body, [Body])
fun inter_fold(dt)((this:Body, acc:[Body]), other:Body) {
  var (this', other') = interact(dt, this, other);
  (this', other' :: acc)
}

sig advance : (Float, State) ~> State
fun advance(dt, system) {
  switch (system) {
    case [] -> []

    case body :: rest -> {
      var (body, rest) = fold_left(inter_fold(dt), (body, []), rest);

      var pos = body.pos +++ (dt **. body.vel);
      var body = (pos=pos, vel=body.vel, mass=body.mass);

      body :: advance(dt, rest)
    }
  }
}

sig energy : (State) ~> Float
fun energy(bodies:[Body]) {
  # TODO (maybe) this can be rewritten as a fold
  switch (bodies) {
    case [] -> 0.0
    case body::rest -> {
      var kinetic = 0.5 *. body.mass *. norm2(body.vel);
      var potential = fold_left(fun(acc, other) {
        var dr = body.pos --- other.pos;
	var d = norm(dr);
	var pot = body.mass *. other.mass /. d;
	acc -. pot
      }, 0.0, rest);

      kinetic +. potential +. energy(rest)
    }
  }
}

fun loop(system, dt, i, n) {
  if (i < n) {
    var system = advance(dt, system);
    loop(system, dt, i+1, n)
  } else { system }
}

typename Setting = [| Correctness | Performance |];
sig run_sim : (Setting) ~> ()
fun run_sim(setting) {
  var n = switch(setting) {
    case Correctness -> 1000
    case Performance -> 50000000
  };
  var system = initial_state();

  var e = energy(system);
  println(floatToString(e));

  var dt = 0.01;
  var system = loop(system, dt, 0, n);

  var e = energy(system);
  println(floatToString(e))
}

fun main() {
  run_sim(Correctness)
}
